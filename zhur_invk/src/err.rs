use std::fmt::Display;

use super::*;
/// Everything that can go wrong with an invocation. Can be generated by the gateway or the core.
#[derive(Clone, Deserialize, Serialize, Debug)]
pub enum InvocationError {
    // The variants below are gateway-side:
    /// The HTTP request from Hyper could not be converted into a Serde-friendly form.
    MalformedRequest,
    /// No app was specified.
    NoId,
    /// No app could be identified with the information given.
    MalformedId(String),
    /// The gateway can't reach the core.
    NoCore,
    /// The core did not reply correctly.
    MalformedReply,
    /// The core did not respond within the timeout period.
    TimedOut,
    /// The invocation could not be serialized for transport.
    SerializeErr,

    // The variants below are core-side:
    /// No app identified by the two ID substrings exists, or it is disabled/hidden.
    NoSuchApp(String, String),
    /// Internal waPC error.
    WapcError(String),
    /// An internal problem occurred within the core.
    OtherInternal,
}
impl Display for InvocationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let text = match self {
            Self::MalformedRequest => "The HTTP request from Hyper could not be converted into a Serde-friendly form.".to_owned(),
            Self::NoId => "No app was specified at all.".to_owned(),
            Self::MalformedId(id) => format!("The ID \"{}\" is not a valid Zhur app ID.", id),
            Self::NoCore => "The Zhur gateway could not connect to the Zhur core.".to_owned(),
            Self::MalformedReply => "The reply from the Zhur core server could not be properly deserialized as an app's HTTP output.".to_owned(),
            Self::TimedOut => "The Zhur core could be reached, but timed out before responding.".to_owned(),
            Self::SerializeErr => "The invocation could not be serialized for transport.".to_owned(),
            
            Self::NoSuchApp(owner, app_name) => format!("The Zhur core could not find an app named {}:{}. It may have been disabled.", owner, app_name),
            Self::WapcError(s) => format!("The waPC host within the core returned the following error: {}", s),
            Self::OtherInternal => "The core encountered an internal error that prevented it from returning a proper reply.".to_owned()
        };
        f.write_str(&text)
    }
}
